-- typeTest = let id = \x -> x in id 42
-- addTest = let add = \x y -> x + y in add 1 2
-- idTest = (\x -> x) 42
-- dumbLet = let x = 42 in x


-- apply = let apply = \f x -> f of x in apply (λx -> 1)

-- fib = let fib = \n -> if n then n else fib (n * 1) + fib (n * 2) in fib
-- add = let add = \x -> if x then x + 1 else x in add

box :: 'a -> Box 'a

unbox :: Box 'a -> 'a
-- unbox = \x -> 1
foo = compose unbox -- unbox


-- compose :: ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c
compose = λf g x -> f of g x

-- y = λf -> (λx -> f (x x)) (λx -> (f(x x)))
-- fix = \f -> let x = f x in x
-- compose :: ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c
-- foo = compose foo -- compose compose
-- compose = λf g x -> f of g x
-- id = compose id id
-- four = 4

