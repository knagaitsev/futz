-- typeTest = let id = \x -> x in id 42
-- addTest = let add = \x y -> x + y in add 1 2
-- idTest = (\x -> x) 42
-- dumbLet = let x = 42 in x
-- (+) :: Int -> Int -> Int

-- (+) = \x y -> $add x y

-- (+) :: Int -> Int -> Int
-- (-) :: Int -> Int -> Int
-- (*) :: Int -> Int -> Int
-- (/) :: Int -> Int -> Int

-- data Maybe 'a = Just 'a | Nothing

$add :: Int -> Int -> Int
(+) = \a b -> $add a b

$sub :: Int -> Int -> Int
(-) = \a b -> $sub a b


$mul :: Int -> Int -> Int
(*) = \a b -> $mul a b

$div :: Int -> Int -> Int
(/) = \a b -> $div a b

flip = \f x y -> f y x
foo = \x -> x + 4


-- compose :: ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c
-- compose = Î»f g x -> f of g x
-- (.) = compose
(>>=) :: 'm 'a -> ('a -> 'm 'b) -> 'm 'b
just :: 'a -> Maybe 'a
something = \f -> f >>= (\x -> just 4)

